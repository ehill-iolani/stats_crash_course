text(30, 110, paste0("p-value = ", format(p_value, scientific = FALSE)))
hist(population, breaks = 20, col = "grey", main = "Population Distribution")
abline(v = 50, col = "red", lwd = 2)
abline(v = sample_mean, col = "blue", lwd = 2)
legend("topright", legend = c("Population Mean", "Sample Mean"),
col = c("red", "blue"), lwd = 2)
text(30, 120, paste0("z = ", round(z, 2)))
text(30, 110, paste0("p-value = ", round(format(p_value, scientific = FALSE), 2)))
round(p_value)
# Set seed for reproducibility
set.seed(123)
# Simulate a population with mean 50 and standard deviation 10
population <- rnorm(n = 1000, mean = 50, sd = 10)
# Take a sample of size 100 from the population
sample <- rnorm(n = 1000, mean = 70, sd = 10)
# sample <- sample(population, size = 100)
# Calculate the sample mean and standard deviation
sample_mean <- mean(sample)
sample_sd <- sd(sample)
# Conduct a one-sample z-test to test the null hypothesis that the population mean is 50
z <- (sample_mean - 50) / (sample_sd / sqrt(100))
p_value <- 2 * pnorm(abs(z), lower.tail = FALSE)
par(mfrow=c(1,1))
# Plot the results
hist(population, breaks = 20, col = "grey", main = "Population Distribution")
abline(v = 50, col = "red", lwd = 2)
abline(v = sample_mean, col = "blue", lwd = 2)
legend("topright", legend = c("Population Mean", "Sample Mean"),
col = c("red", "blue"), lwd = 2)
text(30, 120, paste0("z = ", round(z, 2)))
text(30, 110, paste0("p-value = ", round(format(p_value, scientific = FALSE), 2)))
# Set seed for reproducibility
set.seed(123)
# Simulate a population with mean 50 and standard deviation 10
population <- rnorm(n = 1000, mean = 50, sd = 10)
# Take a sample of size 100 from the population
sample <- rnorm(n = 1000, mean = 70, sd = 10)
# sample <- sample(population, size = 100)
# Calculate the sample mean and standard deviation
sample_mean <- mean(sample)
sample_sd <- sd(sample)
# Conduct a one-sample z-test to test the null hypothesis that the population mean is 50
z <- (sample_mean - 50) / (sample_sd / sqrt(100))
p_value <- 2 * pnorm(abs(z), lower.tail = FALSE)
par(mfrow=c(1,1))
# Plot the results
hist(population, breaks = 20, col = "grey", main = "Population Distribution")
abline(v = 50, col = "red", lwd = 2)
abline(v = sample_mean, col = "blue", lwd = 2)
legend("topright", legend = c("Population Mean", "Sample Mean"),
col = c("red", "blue"), lwd = 2)
text(30, 120, paste0("z = ", round(z, 2)))
text(30, 110, paste0("p-value = ", (format(p_value, scientific = FALSE)))
# Set seed for reproducibility
set.seed(123)
# Set seed for reproducibility
set.seed(123)
# Simulate a population with mean 50 and standard deviation 10
population <- rnorm(n = 1000, mean = 50, sd = 10)
# Take a sample of size 100 from the population
sample <- rnorm(n = 1000, mean = 70, sd = 10)
# sample <- sample(population, size = 100)
# Calculate the sample mean and standard deviation
sample_mean <- mean(sample)
sample_sd <- sd(sample)
# Conduct a one-sample z-test to test the null hypothesis that the population mean is 50
z <- (sample_mean - 50) / (sample_sd / sqrt(100))
p_value <- 2 * pnorm(abs(z), lower.tail = FALSE)
par(mfrow=c(1,1))
# Plot the results
hist(population, breaks = 20, col = "grey", main = "Population Distribution")
abline(v = 50, col = "red", lwd = 2)
abline(v = sample_mean, col = "blue", lwd = 2)
legend("topright", legend = c("Population Mean", "Sample Mean"),
col = c("red", "blue"), lwd = 2)
text(30, 120, paste0("z = ", round(z, 2)))
text(30, 110, paste0("p-value = ", format(p_value, scientific = FALSE)))
# Set seed for reproducibility
set.seed(123)
# Simulate a population with mean 50 and standard deviation 10
population <- rnorm(n = 1000, mean = 50, sd = 10)
# Take a sample of size 100 from the population
sample <- rnorm(n = 1000, mean = 60, sd = 10)
# sample <- sample(population, size = 100)
# Calculate the sample mean and standard deviation
sample_mean <- mean(sample)
sample_sd <- sd(sample)
# Conduct a one-sample z-test to test the null hypothesis that the population mean is 50
z <- (sample_mean - 50) / (sample_sd / sqrt(100))
p_value <- 2 * pnorm(abs(z), lower.tail = FALSE)
par(mfrow=c(1,1))
# Plot the results
hist(population, breaks = 20, col = "grey", main = "Population Distribution")
abline(v = 50, col = "red", lwd = 2)
abline(v = sample_mean, col = "blue", lwd = 2)
legend("topright", legend = c("Population Mean", "Sample Mean"),
col = c("red", "blue"), lwd = 2)
text(30, 120, paste0("z = ", round(z, 2)))
text(30, 110, paste0("p-value = ", format(p_value, scientific = FALSE)))
# Set seed for reproducibility
set.seed(123)
# Simulate a population with mean 50 and standard deviation 10
population <- rnorm(n = 1000, mean = 50, sd = 10)
# Take a sample of size 100 from the population
sample <- rnorm(n = 1000, mean = 60, sd = 10)
# sample <- sample(population, size = 100)
# Calculate the sample mean and standard deviation
sample_mean <- mean(sample)
sample_sd <- sd(sample)
# Conduct a one-sample z-test to test the null hypothesis that the population mean is 50
z <- (sample_mean - 50) / (sample_sd / sqrt(100))
p_value <- 2 * pnorm(abs(z), lower.tail = FALSE)
par(mfrow=c(1,1))
# Plot the results
hist(population, breaks = 20, col = "grey", main = "Population Distribution")
abline(v = 50, col = "red", lwd = 2)
abline(v = sample_mean, col = "blue", lwd = 2)
legend("topright", legend = c("Population Mean", "Sample Mean"),
col = c("red", "blue"), lwd = 2)
text(30, 130, paste0("z = ", round(z, 2)))
text(30, 110, paste0("p-value = ", format(p_value, scientific = FALSE)))
# Set seed for reproducibility
set.seed(123)
# Simulate a population with mean 50 and standard deviation 10
population <- rnorm(n = 1000, mean = 50, sd = 10)
# Take a sample of size 100 from the population
sample <- rnorm(n = 1000, mean = 55, sd = 10)
# sample <- sample(population, size = 100)
# Calculate the sample mean and standard deviation
sample_mean <- mean(sample)
sample_sd <- sd(sample)
# Conduct a one-sample z-test to test the null hypothesis that the population mean is 50
z <- (sample_mean - 50) / (sample_sd / sqrt(100))
p_value <- 2 * pnorm(abs(z), lower.tail = FALSE)
par(mfrow=c(1,1))
# Plot the results
hist(population, breaks = 20, col = "grey", main = "Population Distribution")
abline(v = 50, col = "red", lwd = 2)
abline(v = sample_mean, col = "blue", lwd = 2)
legend("topright", legend = c("Population Mean", "Sample Mean"),
col = c("red", "blue"), lwd = 2)
text(30, 130, paste0("z = ", round(z, 2)))
text(30, 110, paste0("p-value = ", format(p_value, scientific = FALSE)))
# Set seed for reproducibility
set.seed(123)
# Simulate a population with mean 50 and standard deviation 10
population <- rnorm(n = 1000, mean = 50, sd = 10)
# Take a sample of size 100 from the population
sample <- rnorm(n = 1000, mean = 51, sd = 10)
# sample <- sample(population, size = 100)
# Calculate the sample mean and standard deviation
sample_mean <- mean(sample)
sample_sd <- sd(sample)
# Conduct a one-sample z-test to test the null hypothesis that the population mean is 50
z <- (sample_mean - 50) / (sample_sd / sqrt(100))
p_value <- 2 * pnorm(abs(z), lower.tail = FALSE)
par(mfrow=c(1,1))
# Plot the results
hist(population, breaks = 20, col = "grey", main = "Population Distribution")
abline(v = 50, col = "red", lwd = 2)
abline(v = sample_mean, col = "blue", lwd = 2)
legend("topright", legend = c("Population Mean", "Sample Mean"),
col = c("red", "blue"), lwd = 2)
text(30, 130, paste0("z = ", round(z, 2)))
text(30, 110, paste0("p-value = ", format(p_value, scientific = FALSE)))
# Set seed for reproducibility
set.seed(123)
# Simulate a population with mean 50 and standard deviation 10
population <- rnorm(n = 1000, mean = 50, sd = 10)
# Take a sample of size 100 from the population
sample <- rnorm(n = 1000, mean = 52, sd = 10)
# sample <- sample(population, size = 100)
# Calculate the sample mean and standard deviation
sample_mean <- mean(sample)
sample_sd <- sd(sample)
# Conduct a one-sample z-test to test the null hypothesis that the population mean is 50
z <- (sample_mean - 50) / (sample_sd / sqrt(100))
p_value <- 2 * pnorm(abs(z), lower.tail = FALSE)
par(mfrow=c(1,1))
# Plot the results
hist(population, breaks = 20, col = "grey", main = "Population Distribution")
abline(v = 50, col = "red", lwd = 2)
abline(v = sample_mean, col = "blue", lwd = 2)
legend("topright", legend = c("Population Mean", "Sample Mean"),
col = c("red", "blue"), lwd = 2)
text(30, 130, paste0("z = ", round(z, 2)))
text(30, 110, paste0("p-value = ", format(p_value, scientific = FALSE)))
boxplot(population, sample)
library(ggplot2)
dat <- data.frame(population, sample)
data("ToothGrowth")
ToothGrowth
dat
library(dplyr)
?%>%
gather(dat)
dat <- gather(dat)
head(Dat)
head(dat)
p <- ggboxplot(dat, x = "key", y = "value",
color = "key", palette = "lancet",
add = "jitter")
p
# Set seed for reproducibility
set.seed(123)
# Simulate a population with mean 50 and standard deviation 10
population <- rnorm(n = 100, mean = 50, sd = 10)
# Take a sample of size 100 from the population
sample <- rnorm(n = 100, mean = 60, sd = 10)
dat <- data.frame(population, sample)
dat <- gather(dat)
p <- ggboxplot(dat, x = "key", y = "value",
color = "key", palette = "lancet",
add = "jitter")
p
?stat_compare_means
p + stat_compare_means(method = "z.test", paired = TRUE)
library(ggpubr)
ztest
z.test
?ztest
library(BSDA)
install.packages
install.packages("BDSA
")
install.packages("BSDA")
library(BSDA)
z.test
?z.test()
z.test(population, sample)
z.test(population, sample, sigma.x = 10, sigma.y = 10)
res <- z.test(population, sample, sigma.x = 10, sigma.y = 10)
tes
res
?compare_means
p
res$p.value
p + geom_text(x=1, y=80, label=paste0("p-value = ", res$p.value))
p + geom_text(x=1, y=80, label=paste0("p-value = ", round(res$p.value, 2))
)
p + geom_text(x=1, y=80, label=paste0("p-value = ", round(res$p.value, 6)))
p + geom_text(x=1, y=80, label=paste0("p-value = ", formatC(res$p.value, format = "e", digits = 2)))
library(ggplot2)
library(dplyr)
library(ggpubr)
library(BSDA)
# Set seed for reproducibility
set.seed(123)
# Simulate a population with mean 50 and standard deviation 10
population <- rnorm(n = 100, mean = 50, sd = 10)
# Take a sample of size 100 from the population
sample <- rnorm(n = 100, mean = 60, sd = 10)
dat <- data.frame(population, sample)
dat <- gather(dat)
# Calculate the sample mean and standard deviation
sample_mean <- mean(sample)
sample_sd <- sd(sample)
# Conduct a one-sample z-test to test the null hypothesis that the population mean is 50
z <- (sample_mean - 50) / (sample_sd / sqrt(100))
p_value <- 2 * pnorm(abs(z), lower.tail = FALSE)
par(mfrow=c(1,1))
p <- ggboxplot(dat, x = "key", y = "value",
color = "key", palette = "lancet",
add = "jitter")
res <- z.test(population, sample, sigma.x = 10, sigma.y = 10)
p + geom_text(x = 1, y = 90, label=paste0("p-value = ", formatC(res$p.value, format = "e", digits = 2)))
tiff("test.tiff", units="in", width=5, height=5, res=300)
p + geom_text(x = 1, y = 90, label=paste0("p-value = ", formatC(res$p.value, format = "e", digits = 2)))
dev.off()
?png
png("test.png", units="in", width=5, height=5, res=300)
p + geom_text(x = 1, y = 90, label=paste0("p-value = ", formatC(res$p.value, format = "e", digits = 2)))
dev.off()
png("ztest.png", units="in", width=5, height=5, res=300)
p + geom_text(x = 1, y = 90, label=paste0("p-value = ", formatC(res$p.value, format = "e", digits = 2)))
dev.off()
png("ztest.png", units="in", width=8.9, height=5, res=300)
p + geom_text(x = 1, y = 90, label=paste0("p-value = ", formatC(res$p.value, format = "e", digits = 2)))
dev.off()
png("/viz_out/ztest.png", units="in", width=8.9, height=5, res=300)
p + geom_text(x = 1, y = 90, label=paste0("p-value = ", formatC(res$p.value, format = "e", digits = 2)))
dev.off()
png("./viz_out/ztest.png", units="in", width=8.9, height=5, res=300)
p + geom_text(x = 1, y = 90, label=paste0("p-value = ", formatC(res$p.value, format = "e", digits = 2)))
dev.off()
library("ggpubr")
# Data in two numeric vectors
# ++++++++++++++++++++++++++
# Weight of the mice before treatment
before <-c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)
# Weight of the mice after treatment
after <-c(392.9, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)
# Create a data frame
my_data <- data.frame(
group = rep(c("before", "after"), each = 10),
weight = c(before,  after)
)
res <- wilcox.test(weight ~ group, data = my_data, paired = TRUE)
stat.test <- compare_means(weight ~ group, data = my_data, method = "wilcox", paired = TRUE)
stat.test <- stat.test %>% mutate(y.position = c(450))
p <- ggboxplot(my_data, x = "group", y = "weight",
color = "group", palette = c("#00AFBB", "#E7B800"),
order = c("before", "after"),
ylab = "Weight", xlab = "Groups", add = "jitter")
png("./viz_out/wilcoxon.png", units="in", width=8.9, height=5, res=300)
p + stat_pvalue_manual(stat.test, label = "p = {p.adj}")
dev.off()
data("ToothGrowth")
p <- ggboxplot(ToothGrowth, x = "supp", y = "len",
color = "supp", palette = "jco",
add = "jitter")
p + stat_compare_means(method = "t.test")
png("./viz_out/ttest.png", units="in", width=8.9, height=5, res=300)
p + stat_compare_means(method = "t.test")
dev.off()
library(tidyverse)
library(ggpubr)
library(rstatix)
data("selfesteem", package = "datarium")
set.seed(123)
data("selfesteem2", package = "datarium")
selfesteem2 %>% sample_n_by(treatment, size = 1)
# Gather the columns t1, t2 and t3 into long format.
# Convert id and time into factor variables
selfesteem2 <- selfesteem2 %>%
gather(key = "time", value = "score", t1, t2, t3) %>%
convert_as_factor(id, time)
# Inspect some random rows of the data by groups
set.seed(123)
selfesteem2 %>% sample_n_by(treatment, time, size = 1)
selfesteem2 %>%
group_by(treatment, time) %>%
get_summary_stats(score, type = "mean_sd")
bxp <- ggboxplot(
selfesteem2, x = "time", y = "score",
color = "treatment", palette = "jco"
)
bxp
selfesteem2 %>%
group_by(treatment, time) %>%
identify_outliers(score)
selfesteem2 %>%
group_by(treatment, time) %>%
shapiro_test(score)
ggqqplot(selfesteem2, "score", ggtheme = theme_bw()) +
facet_grid(time ~ treatment, labeller = "label_both")
res.aov <- anova_test(
data = selfesteem2, dv = score, wid = id,
within = c(treatment, time)
)
get_anova_table(res.aov)
# Effect of treatment at each time point
one.way <- selfesteem2 %>%
group_by(time) %>%
anova_test(dv = score, wid = id, within = treatment) %>%
get_anova_table() %>%
adjust_pvalue(method = "bonferroni")
one.way
# Pairwise comparisons between treatment groups
pwc <- selfesteem2 %>%
group_by(time) %>%
pairwise_t_test(
score ~ treatment, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc
# Effect of time at each level of treatment
one.way2 <- selfesteem2 %>%
group_by(treatment) %>%
anova_test(dv = score, wid = id, within = time) %>%
get_anova_table() %>%
adjust_pvalue(method = "bonferroni")
# Pairwise comparisons between time points
pwc2 <- selfesteem2 %>%
group_by(treatment) %>%
pairwise_t_test(
score ~ time, paired = TRUE,
p.adjust.method = "bonferroni"
)
pwc2
# comparisons for treatment variable
selfesteem2 %>%
pairwise_t_test(
score ~ treatment, paired = TRUE,
p.adjust.method = "bonferroni"
)
# comparisons for time variable
selfesteem2 %>%
pairwise_t_test(
score ~ time, paired = TRUE,
p.adjust.method = "bonferroni"
)
# Visualization: box plots with p-values
pwc <- pwc %>% add_xy_position(x = "time")
bxp +
stat_pvalue_manual(pwc, tip.length = 0, hide.ns = TRUE) +
labs(
subtitle = get_test_label(res.aov, detailed = TRUE),
caption = get_pwc_label(pwc)
)
# Visualization: box plots with p-values
png("./viz_out/repanova.png", units="in", width=8.9, height=5, res=300)
bxp +
stat_pvalue_manual(pwc, tip.length = 0, hide.ns = TRUE) +
labs(
subtitle = get_test_label(res.aov, detailed = TRUE),
caption = get_pwc_label(pwc)
)
dev.off()
library("ggpubr")
my_data <- mtcars
p <- ggscatter(my_data, x = "mpg", y = "wt",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
cor.coeff.args = list(method = "pearson", label.x.npc = "middle", label.y.npc = "top"),
xlab = "Miles/(US) gallon", ylab = "Weight (1000 lbs)")
p
library("ggpubr")
my_data <- mtcars
p <- ggscatter(my_data, x = "mpg", y = "wt",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
cor.coeff.args = list(method = "pearson", label.x.npc = "middle", label.y.npc = "top"),
xlab = "Miles/(US) gallon", ylab = "Weight (1000 lbs)")
png("./viz_out/pearsons.png", units="in", width=8.9, height=5, res=300)
p
dev.off()
# Weight of the mice before treatment
before <-c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)
# Weight of the mice after treatment
after <-c(392.9, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)
# Create a data frame
my_data <- data.frame(
group = rep(c("before", "after"), each = 10),
weight = c(before,  after)
)
p <- ggboxplot(my_data, x = "group", y = "weight", color = "group", palette = "lancet", add = "jitter")
png("./viz_out/paired_ttest.png", units="in", width=8.9, height=5, res=300)
p + stat_compare_means(method = "t.test", paired = TRUE)
dev.off()
library(MASS)
X<-mvrnorm(20,mu=c(5,6),Sigma=matrix(c(1,0.97,0.97,1),ncol=2),empirical=TRUE)
X
cor(X)
plot(X[,1], X[,2])
Y<-mvrnorm(20,mu=c(5,6),Sigma=matrix(c(1,-0.97,-0.97,1),ncol=2),empirical=TRUE)
Y
cor(Y)
plot(Y[,1], Y[,2])
Z<-mvrnorm(20,mu=c(5,6),Sigma=matrix(c(1,0,0,1),ncol=2),empirical=TRUE)
Z
cor(Z)
plot(Z[,1], Z[,2])
png("./viz_out/correlation.png", units="in", width=8.9, height=5, res=300)
par(mfrow=c(1,3))
plot(Y[,1], Y[,2], main = "Correlation of -0.97", col = "green", xlab = "x axis", ylab = "y axis")
abline(lm(Y[,2] ~ Y[,1]), col = "green")
plot(Z[,1], Z[,2], main = "Correlation of 0", col = "blue", xlab = "x axis", ylab = "y axis")
abline(lm(Z[,2] ~ Z[,1]), col = "blue")
plot(X[,1], X[,2], main = "Correlation of 0.97", col = "red", xlab = "x axis", ylab = "y axis")
abline(lm(X[,2] ~ X[,1]), col = "red")
dev.off()
library(ggstatsplot)
ggbarstats(
data  = mtcars,
x     = am,
y     = cyl
)
p <- ggbarstats(
data  = mtcars,
x     = am,
y     = cyl
)
library(ggstatsplot)
p <- ggbarstats(
data  = mtcars,
x     = am,
y     = cyl
)
png("./viz_out/chisquare.png", units="in", width=8.9, height=5, res=300)
p
dev.off()
library(palmerpenguins)
library(tidyverse)
library(ggplot2)
library(ggstatsplot)
dat <- penguins %>%
select(species, flipper_length_mm)
dat <- penguins %>%
select(species, flipper_length_mm)
library(palmerpenguins)
library(tidyverse)
library(ggplot2)
library(ggstatsplot)
penguins
dat <- penguins %>%
select(species, flipper_length_mm)
View(penguins)
dat <- penguins %>%
select(species, flipper_length_mm)
# Edit at your own risk
library(ggpubr)
dat <- penguins %>%
select(species, flipper_length_mm)
library(tidyverse)
dat <- penguins %>%
select(species, flipper_length_mm)
penguisn
penguins
dat <- penguins %>%
select(species, flipper_length_mm)
dat
