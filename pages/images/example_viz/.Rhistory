#geom_function(aes(colour = "Prior 2"), fun = dnorm, args = list(mean = 3, sd = 4)) +
geom_function(aes(colour = "Prior 3"), fun = dnorm, args = list(mean = 4, sd = 2))
base <- ggplot() + xlim(-10, 10)
base +
geom_function(aes(colour = "Original prior"), fun = dnorm, args = list(mean = -3, sd = 2)) +
#geom_function(aes(colour = "Prior 1"), fun = dnorm, args = list(mean = 2, sd = 2)) +
#geom_function(aes(colour = "Prior 2"), fun = dnorm, args = list(mean = 3, sd = 4)) +
geom_function(aes(colour = "Prior 3"), fun = dnorm, args = list(mean = 3, sd = 2))
base <- ggplot() + xlim(-10, 10)
base +
geom_function(aes(colour = "Original prior"), fun = dnorm, args = list(mean = -3, sd = 2)) +
#geom_function(aes(colour = "Prior 1"), fun = dnorm, args = list(mean = 2, sd = 2)) +
#geom_function(aes(colour = "Prior 2"), fun = dnorm, args = list(mean = 3, sd = 4)) +
geom_function(aes(colour = "Prior 3"), fun = dnorm, args = list(mean = 3, sd = 2)) +
theme("minimal")
base <- ggplot() + xlim(-10, 10)
base +
geom_function(aes(colour = "Original prior"), fun = dnorm, args = list(mean = -3, sd = 2)) +
#geom_function(aes(colour = "Prior 1"), fun = dnorm, args = list(mean = 2, sd = 2)) +
#geom_function(aes(colour = "Prior 2"), fun = dnorm, args = list(mean = 3, sd = 4)) +
geom_function(aes(colour = "Prior 3"), fun = dnorm, args = list(mean = 3, sd = 2)) +
theme_minimal()
base <- ggplot() + xlim(-10, 10)
base +
geom_function(aes(colour = "Population 1"), fun = dnorm, args = list(mean = -3, sd = 2)) +
geom_function(aes(colour = "Population 2"), fun = dnorm, args = list(mean = 3, sd = 2)) +
theme_minimal()
base <- ggplot() + xlim(-10, 10)
base +
geom_function(aes(colour = "Population 1"), fun = dnorm, args = list(mean = -3, sd = 2)) +
geom_function(aes(colour = "Population 2"), fun = dnorm, args = list(mean = 3, sd = 2)) +
#theme_minimal() +
theme_classic()
base <- ggplot() + xlim(-10, 10)
base +
geom_function(aes(colour = "Population 1", size = 2), fun = dnorm, args = list(mean = -3, sd = 2)) +
geom_function(aes(colour = "Population 2"), fun = dnorm, args = list(mean = 3, sd = 2)) +
#theme_minimal() +
theme_classic()
base <- ggplot() + xlim(-10, 10)
base +
geom_function(aes(colour = "Population 1", size = 1.5), fun = dnorm, args = list(mean = -3, sd = 2)) +
geom_function(aes(colour = "Population 2"), fun = dnorm, args = list(mean = 3, sd = 2)) +
#theme_minimal() +
theme_classic()
base <- ggplot() + xlim(-10, 10)
base +
geom_function(aes(colour = "Population 1", size = 1), fun = dnorm, args = list(mean = -3, sd = 2)) +
geom_function(aes(colour = "Population 2"), fun = dnorm, args = list(mean = 3, sd = 2)) +
#theme_minimal() +
theme_classic()
base <- ggplot() + xlim(-10, 10)
base +
geom_function(aes(colour = "Population 1"), fun = dnorm, args = list(mean = -3, sd = 2)) +
geom_function(aes(colour = "Population 2"), fun = dnorm, args = list(mean = 3, sd = 2)) +
#theme_minimal() +
geom_line(size = 2)
theme_classic()
base <- ggplot() + xlim(-10, 10)
base +
geom_function(aes(colour = "Population 1"), fun = dnorm, args = list(mean = -3, sd = 2)) +
geom_function(aes(colour = "Population 2"), fun = dnorm, args = list(mean = 3, sd = 2)) +
#theme_minimal() +
geom_line(size = 2) +
theme_classic()
base <- ggplot() + xlim(-10, 10)
base +
geom_function(aes(colour = "Population 1"), fun = dnorm, args = list(mean = -3, sd = 2)) +
geom_function(aes(colour = "Population 2"), fun = dnorm, args = list(mean = 3, sd = 2)) +
#theme_minimal() +
geom_line(size = 10) +
theme_classic()
base <- ggplot() + xlim(-10, 10)
base +
geom_function(aes(colour = "Population 1"), fun = dnorm, args = list(mean = -3, sd = 2), size = 2) +
geom_function(aes(colour = "Population 2"), fun = dnorm, args = list(mean = 3, sd = 2)) +
#theme_minimal() +
geom_line(size = 10) +
theme_classic()
base <- ggplot() + xlim(-10, 10)
base +
geom_function(aes(colour = "Population 1"), fun = dnorm, args = list(mean = -3, sd = 2), size = 2) +
geom_function(aes(colour = "Population 2"), fun = dnorm, args = list(mean = 3, sd = 2), size = 2) +
#theme_minimal() +
theme_classic()
base <- ggplot() + xlim(-10, 10)
base +
geom_function(aes(colour = "Population 1"), fun = dnorm, args = list(mean = -3, sd = 2), size = 2) +
geom_function(aes(colour = "Population 2"), fun = dnorm, args = list(mean = 3, sd = 2), size = 2) +
geom_ribbon()
theme_classic()
base <- ggplot() + xlim(-10, 10)
base +
geom_function(aes(colour = "Population 1"), fun = dnorm, args = list(mean = -3, sd = 2), size = 2) +
geom_function(aes(colour = "Population 2"), fun = dnorm, args = list(mean = 3, sd = 2), size = 2) +
geom_ribbon() +
theme_classic()
base <- ggplot() + xlim(-10, 10)
p <- base +
geom_function(aes(colour = "Population 1"), fun = dnorm, args = list(mean = -3, sd = 2), size = 2) +
geom_function(aes(colour = "Population 2"), fun = dnorm, args = list(mean = 3, sd = 2), size = 2) +
geom_ribbon() +
theme_classic()
p + stat_function(fun = dnorm_limit, geom = "area", fill = "blue", alpha = 0.2)
dnorm_limit <- function(x) {
y <- dnorm(x)
y[x < 0  |  x > 2] <- NA
return(y)
}
p + stat_function(fun = dnorm_limit, geom = "area", fill = "blue", alpha = 0.2)
p
library(ggpubr)
compare_means(formula, data, method = "wilcox.test", paired = FALSE,
group.by = NULL, ref.group = NULL, ...)
p <- ggboxplot(ToothGrowth, x = "supp", y = "len",
color = "supp", palette = "jco",
add = "jitter")
#  Add p-value
p + stat_compare_means()
# Change method
p + stat_compare_means(method = "t.test")
ggboxplot(ToothGrowth, x = "dose", y = "len",
color = "dose", palette = "jco")+
stat_compare_means(comparisons = my_comparisons, label.y = c(29, 35, 40))+
stat_compare_means(label.y = 45)
my_comparisons <- list( c("0.5", "1"), c("1", "2"), c("0.5", "2") )
my_comparisons <- list( c("0.5", "1"), c("1", "2"), c("0.5", "2") )
my_comparisons <- list( c("0.5", "1"), c("1", "2"), c("0.5", "2") )
ggboxplot(ToothGrowth, x = "dose", y = "len",
color = "dose", palette = "jco")+
stat_compare_means(comparisons = my_comparisons, label.y = c(29, 35, 40))+
stat_compare_means(label.y = 45)
hist(rbeta(10000,5,2))
hist(rbeta(10000,2,5))
hist(rbeta(10000,5,5))
N <- 10000
x <- rnbinom(N, 10, .5)
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='lightblue', xlab=' ', ylab=' ', axes=F,
main='Positive Skewed')
lines(density(x,bw=1), col='red', lwd=3)
?rnbinom
N <- 10000
x <- rnbinom(N, 10, -.5)
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='lightblue', xlab=' ', ylab=' ', axes=F,
main='Positive Skewed')
N <- 10000
x <- rnbinom(N, -10, .5)
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='lightblue', xlab=' ', ylab=' ', axes=F,
main='Positive Skewed')
N <- 10000
x <- rnbinom(N, 10, .5)
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='lightblue', xlab=' ', ylab=' ', axes=F,
main='Positive Skewed')
lines(density(x,bw=1), col='red', lwd=3)
sigma = 0.6
mu = 2
x = seq(-10, 60, length.out = 500)
Z = dlnorm(x, mu, sigma)
plot(x, Z, type = "l")
expZ = exp(mu + sigma^2/2)
delta = 3
pdfX = dnorm(x, expZ, delta)
plot(x, pdfX, type = "l")
sigma = 0.6
mu = 2
x = seq(-10, 60, length.out = 500)
Z = dlnorm(x, mu, sigma)
plot(x, Z, type = "l", xlim = 30)
sigma = 0.6
mu = 2
x = seq(-10, 60, length.out = 500)
Z = dlnorm(x, mu, sigma)
plot(x, Z, type = "l")
sigma = 0.6
mu = 2
x = seq(-10, 60, length.out = 500)
Z = dlnorm(x, mu, sigma)
plot(x, Z, type = "l",k xlim = c(-10, 30))
sigma = 0.6
mu = 2
x = seq(-10, 60, length.out = 500)
Z = dlnorm(x, mu, sigma)
plot(x, Z, type = "l", xlim = c(-10, 30))
sigma = 0.6
mu = 2
x = seq(-10, 60, length.out = 500)
Z = dlnorm(x, mu, sigma)
plot(x, Z, type = "l", xlim = c(-10, 30))
line(x, pdfX, type = "l", xlim = c(-10, 30))
sigma = 0.6
mu = 2
x = seq(-10, 60, length.out = 500)
Z = dlnorm(x, mu, sigma)
plot(x, Z, type = "l", xlim = c(-10, 30))
line(x, pdfX, xlim = c(-10, 30))
sigma = 0.6
mu = 2
x = seq(-10, 60, length.out = 500)
Z = dlnorm(x, mu, sigma)
plot(x, Z, type = "l", xlim = c(-10, 30))
line(x, pdfX)
plot(x, Z, type = "l", xlim = c(-10, 30))
line(x, pdfX)
line(pdfX)
plot(x, Z, type = "l", xlim = c(-10, 30))
line(pdfX)
pdfX
expZ = exp(mu + sigma^2/2)
delta = 3
pdfX = dnorm(x, expZ, delta)
plot(x, pdfX, type = "l")
sigma = 0.6
mu = 2
x = seq(-10, 60, length.out = 500)
Z = dlnorm(x, mu, sigma)
plot(x, Z, type = "l", xlim = c(-10, 30))
lines(pdfX)
sigma = 0.6
mu = 2
x = seq(-10, 60, length.out = 500)
Z = dlnorm(x, mu, sigma)
plot(x, Z, type = "l", xlim = c(-10, 30))
lines(x, pdfX)
plot(x, Z, type = "l", xlim = c(-10, 30), ylim = c(0, .4))
lines(x, pdfX)
sigma = 0.6
mu = 2
x = seq(-10, 60, length.out = 500)
Z = dlnorm(x, mu, sigma)
plot(x, Z, type = "l", xlim = c(-10, 30), ylim = c(0, .12))
lines(x, pdfX)
sigma = 0.6
mu = 2
x = seq(-10, 60, length.out = 500)
Z = dlnorm(x, mu, sigma)
plot(x, Z, type = "l", xlim = c(-10, 30), ylim = c(0, .15))
lines(x, pdfX)
plot(x, Z, type = "l", xlim = c(-10, 30), ylim = c(0, .15), col = "red")
sigma = 0.6
mu = 2
x = seq(-10, 60, length.out = 500)
Z = dlnorm(x, mu, sigma)
plot(x, Z, type = "l", xlim = c(-10, 30), ylim = c(0, .15), col = "red")
lines(x, pdfX, col = "blue")
legend("topright", c("left skewed", "normal"), fill = c("red", "blue"), col = c("red", "blue"))
lot(x, Z, type = "l", xlim = c(-5, 30), ylim = c(0, .15), col = "red")
plot(x, Z, type = "l", xlim = c(-5, 30), ylim = c(0, .15), col = "red")
lines(x, pdfX, col = "blue")
legend("topright", c("left skewed", "normal"), fill = c("red", "blue"), col = c("red", "blue"))
library(palmerpenguins)
install.packages("palmerpenguins")
library(palmerpenguins)
library(tidyverse)
dat <- penguins %>%
select(species, flipper_length_mm)
summay(dat)
summary(dat)
ibrary(ggplot2)
library(ggplot2)
ggplot(dat) +
aes(x = species, y = flipper_length_mm, color = species) +
geom_jitter() +
theme(legend.position = "none")
aggregate(flipper_length_mm ~ species,
data = dat,
function(x) round(c(mean = mean(x), sd = sd(x)), 2)
)
aggregate(flipper_length_mm ~ species,
data = dat,
function(x) round(c(mean = mean(x), sd = sd(x)), 2)
)
group_by(dat, species) %>%
summarise(
mean = mean(flipper_length_mm, na.rm = TRUE),
sd = sd(flipper_length_mm, na.rm = TRUE)
)
oneway.test(flipper_length_mm ~ species,
data = dat,
var.equal = TRUE # assuming equal variances
)
library(ggpubr)
for (i in y) {
for (j in x) {
p <- ggboxplot(dat,
x = colnames(dat[j]), y = colnames(dat[i]),
color = colnames(dat[j]),
legend = "none",
palette = "npg",
add = "jitter"
)
print(
p + stat_compare_means(aes(label = paste0(after_stat(method), ", p-value = ", after_stat(p.format))),
method = method1, label.y = max(dat[, i], na.rm = TRUE)
)
+ stat_compare_means(comparisons = my_comparisons, method = method2, label = "p.format") # remove if p-value of ANOVA or Kruskal-Wallis test >= alpha
)
}
}
# Edit from here
x <- which(names(dat) == "species") # name of grouping variable
y <- which(
names(dat) == "flipper_length_mm" # names of variables to test
)
method1 <- "anova" # one of "anova" or "kruskal.test"
method2 <- "t.test" # one of "wilcox.test" or "t.test"
my_comparisons <- list(c("Chinstrap", "Adelie"), c("Gentoo", "Adelie"), c("Gentoo", "Chinstrap")) # comparisons for post-hoc tests
# Edit at your own risk
library(ggpubr)
for (i in y) {
for (j in x) {
p <- ggboxplot(dat,
x = colnames(dat[j]), y = colnames(dat[i]),
color = colnames(dat[j]),
legend = "none",
palette = "npg",
add = "jitter"
)
print(
p + stat_compare_means(aes(label = paste0(after_stat(method), ", p-value = ", after_stat(p.format))),
method = method1, label.y = max(dat[, i], na.rm = TRUE)
)
+ stat_compare_means(comparisons = my_comparisons, method = method2, label = "p.format") # remove if p-value of ANOVA or Kruskal-Wallis test >= alpha
)
}
}
# Edit from here
x <- which(names(dat) == "species") # name of grouping variable
y <- which(
names(dat) == "flipper_length_mm" # names of variables to test
)
method1 <- "anova" # one of "anova" or "kruskal.test"
method2 <- "t.test" # one of "wilcox.test" or "t.test"
my_comparisons <- list(c("Chinstrap", "Adelie"), c("Gentoo", "Adelie"), c("Gentoo", "Chinstrap")) # comparisons for post-hoc tests
# Edit until here
# Edit at your own risk
library(ggpubr)
for (i in y) {
for (j in x) {
p <- ggboxplot(dat,
x = colnames(dat[j]), y = colnames(dat[i]),
color = colnames(dat[j]),
legend = "none",
palette = "npg",
add = "jitter"
)
print(
p + stat_compare_means(aes(label = paste0(after_stat(method), ", p-value = ", after_stat(p.format))),
method = method1, label.y = max(dat[, i], na.rm = TRUE)
)
+ stat_compare_means(comparisons = my_comparisons, method = method2, label = "p.format") # remove if p-value of ANOVA or Kruskal-Wallis test >= alpha
)
}
}
library(palmerpenguins)
library(tidyverse)
library(ggplot2)
dat <- penguins %>%
select(species, flipper_length_mm)
ggplot(dat) +
aes(x = species, y = flipper_length_mm, color = species) +
geom_jitter() +
theme(legend.position = "none")
aggregate(flipper_length_mm ~ species,
data = dat,
function(x) round(c(mean = mean(x), sd = sd(x)), 2)
)
group_by(dat, species) %>%
summarise(
mean = mean(flipper_length_mm, na.rm = TRUE),
sd = sd(flipper_length_mm, na.rm = TRUE)
)
oneway.test(flipper_length_mm ~ species,
data = dat,
var.equal = TRUE # assuming equal variances
)
# Edit from here
x <- which(names(dat) == "species") # name of grouping variable
y <- which(
names(dat) == "flipper_length_mm" # names of variables to test
)
method1 <- "anova" # one of "anova" or "kruskal.test"
method2 <- "t.test" # one of "wilcox.test" or "t.test"
my_comparisons <- list(c("Chinstrap", "Adelie"), c("Gentoo", "Adelie"), c("Gentoo", "Chinstrap")) # comparisons for post-hoc tests
# Edit until here
# Edit at your own risk
library(ggpubr)
for (i in y) {
for (j in x) {
p <- ggboxplot(dat,
x = colnames(dat[j]), y = colnames(dat[i]),
color = colnames(dat[j]),
legend = "none",
palette = "npg",
add = "jitter"
)
print(
p + stat_compare_means(aes(label = paste0(after_stat(method), ", p-value = ", after_stat(p.format))),
method = method1, label.y = max(dat[, i], na.rm = TRUE)
)
+ stat_compare_means(comparisons = my_comparisons, method = method2, label = "p.format") # remove if p-value of ANOVA or Kruskal-Wallis test >= alpha
)
}
}
library(ggstatsplot)
install.packages("ggstatsplot")
install.packages("ggstatsplot")
library(ggstatsplot)
install.packages("ggstatsplot")
library(tidyverse)
library(ggpubr)
library(rstatix)
data("selfesteem", package = "datarium")
head(selfesteem, 3)
selfesteem <- selfesteem %>%
gather(key = "time", value = "score", t1, t2, t3) %>%
convert_as_factor(id, time)
head(selfesteem, 3)
selfesteem %>%
group_by(time) %>%
get_summary_stats(score, type = "common")
ggboxplot(selfesteem, x = "time", y = "score", add = "jitter")
res.fried <- selfesteem %>% friedman_test(score ~ time |id)
res.fried
selfesteem %>% friedman_effsize(score ~ time |id)
# pairwise comparisons
pwc <- selfesteem %>%
wilcox_test(score ~ time, paired = TRUE, p.adjust.method = "bonferroni")
pwc
pwc2 <- selfesteem %>%
sign_test(score ~ time, p.adjust.method = "bonferroni")
pwc2
# Visualization: box plots with p-values
pwc <- pwc %>% add_xy_position(x = "time")
ggboxplot(selfesteem, x = "time", y = "score", add = "point") +
stat_pvalue_manual(pwc, hide.ns = TRUE) +
labs(
subtitle = get_test_label(res.fried,  detailed = TRUE),
caption = get_pwc_label(pwc)
)
?ggboxplot
pwc <- pwc %>% add_xy_position(x = "time")
ggboxplot(selfesteem, x = "time", y = "score", add = "point", color = "time", palette = "npg") +
stat_pvalue_manual(pwc, hide.ns = TRUE) +
labs(
subtitle = get_test_label(res.fried,  detailed = TRUE),
caption = get_pwc_label(pwc)
)
pwc <- pwc %>% add_xy_position(x = "time")
ggboxplot(selfesteem, x = "time", y = "score", add = "point", color = "time", palette = "aaas") +
stat_pvalue_manual(pwc, hide.ns = TRUE) +
labs(
subtitle = get_test_label(res.fried,  detailed = TRUE),
caption = get_pwc_label(pwc)
)
ggboxplot(selfesteem, x = "time", y = "score", add = "point", color = "time", palette = "rickandmorty") +
stat_pvalue_manual(pwc, hide.ns = TRUE) +
labs(
subtitle = get_test_label(res.fried,  detailed = TRUE),
caption = get_pwc_label(pwc)
)
ggboxplot(selfesteem, x = "time", y = "score", add = "point", color = "time", palette = "ucscgb") +
stat_pvalue_manual(pwc, hide.ns = TRUE) +
labs(
subtitle = get_test_label(res.fried,  detailed = TRUE),
caption = get_pwc_label(pwc)
)
png("./viz_out/friedman.png", units="in", width=8.9, height=5, res=300)
p
p <- ggboxplot(selfesteem, x = "time", y = "score", add = "point", color = "time", palette = "ucscgb") +
stat_pvalue_manual(pwc, hide.ns = TRUE) +
labs(
subtitle = get_test_label(res.fried,  detailed = TRUE),
caption = get_pwc_label(pwc)
)
p
p <- ggboxplot(selfesteem, x = "time", y = "score", add = "point", color = "time", palette = "ucscgb") +
stat_pvalue_manual(pwc, hide.ns = TRUE) +
labs(
subtitle = get_test_label(res.fried,  detailed = TRUE),
caption = get_pwc_label(pwc)
)
p
p
png("./viz_out/friedman.png", units="in", width=8.9, height=5, res=300)
p
dev.off()
setwd("~/Documents/github_pages/stats_crash_course/pages/images/example_viz")
png("./viz_out/friedman.png", units="in", width=8.9, height=5, res=300)
p
dev.off()
library(ggstatsplot)
set.seed(9) # for reproducibility
data <- data.frame(
before = sample(c("+", "-", "+", "+"), 20, replace = TRUE),
after  = sample(c("-", "+", "-", "-"), 20, replace = TRUE))
data
p <- ggbarstats(
data = data,
x    = before,
y    = after,
paired = TRUE,
label = "both"
)
p
