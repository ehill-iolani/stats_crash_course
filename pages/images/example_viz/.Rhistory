dat.species <- dat[, 5]
par(mfrow = c(2, 2))
hist(log.dat$Sepal.Length, breaks = 20)
hist(log.dat$Sepal.Width, breaks = 20)
hist(log.dat$Petal.Length, breaks = 20)
hist(log.dat$Petal.Width, breaks = 20)
pr.dat <- prcomp(log.dat, center = TRUE, scale. = TRUE)
summary(pr.dat)
# 73.3% of variance in the data is explained by PC1, 22.7% by PC2, 3.3% by PC3 and 0.6% by PC4
library(devtools)
library(ggbiplot)
ggbiplot(pr.dat, obs.scale = 1, var.scale = 1,
groups = dat$Species, ellipse = TRUE, circle = TRUE,ellipse.prob = 0.68) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
expZ = exp(mu + sigma^2/2)
delta = 3
pdfX = dnorm(x, expZ, delta)
plot(x, pdfX, type = "l")
library(ggpubr)
data("ToothGrowth")
my_comparisons <- list( c("0.5", "1"), c("1", "2"), c("0.5", "2") )
ggboxplot(ToothGrowth, x = "dose", y = "len",
color = "dose", palette = "jco")+
stat_compare_means(comparisons = my_comparisons, label.y = c(29, 35, 40))+
stat_compare_means(label.y = 45)
hist(rbeta(10000,5,2))
hist(rbeta(10000,2,5))
hist(rbeta(10000,5,5))
N <- 10000
x <- rnbinom(N, 10, .5)
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='lightblue', xlab=' ', ylab=' ', axes=F,
main='Positive Skewed')
lines(density(x,bw=1), col='red', lwd=3)
sigma = 0.6
mu = 2
x = seq(-10, 60, length.out = 500)
Z = dlnorm(x, mu, sigma)
plot(x, Z, type = "l", xlim = c(-5, 30), ylim = c(0, .15), col = "red")
lines(x, pdfX, col = "blue")
sigma = 0.6
mu = 2
x = seq(-10, 60, length.out = 500)
Z = dlnorm(x, mu, sigma)
plot(x, Z, type = "l", xlim = c(-5, 30), ylim = c(0, .15), col = "red")
lines(x, pdfX, col = "blue")
sigma = 0.6
mu = 2
x = seq(-10, 60, length.out = 500)
Z = dlnorm(x, mu, sigma)
plot(x, Z, type = "l", xlim = c(-5, 30), ylim = c(0, .15), col = "red")
lines(x, pdfX, col = "blue")
sigma = 0.6
mu = 2
x = seq(-10, 60, length.out = 500)
Z = dlnorm(x, mu, sigma)
plot(x, Z, type = "l", xlim = c(-5, 30), ylim = c(0, .15), col = "red")
lines(x, pdfX, col = "blue")
N <- 10000
x <- rnbinom(N, 10, .5)
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='lightblue', xlab=' ', ylab=' ', axes=F,
main='Positive Skewed')
lines(density(x,bw=1), col='red', lwd=3)
N <- 10000
x <- rnbinom(N, 10, .5)
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='lightblue', xlab=' ', ylab=' ', axes=F,
main='Positive Skewed')
lines(density(x,bw=1), col='red', lwd=3)
N <- 10000
x <- rnbinom(N, 10, .5)
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='lightblue', xlab=' ', ylab=' ', axes=F,
main='Positive Skewed')
lines(density(x,bw=1), col='red', lwd=3)
library(ggpubr)
data("ToothGrowth")
my_comparisons <- list( c("0.5", "1"), c("1", "2"), c("0.5", "2") )
ggboxplot(ToothGrowth, x = "dose", y = "len",
color = "dose", palette = "jco")+
stat_compare_means(comparisons = my_comparisons, label.y = c(29, 35, 40))+
stat_compare_means(label.y = 45)
hist(rbeta(10000,5,2))
hist(rbeta(10000,2,5))
hist(rbeta(10000,5,5))
N <- 10000
x <- rnbinom(N, 10, .5)
hist(x,
xlim=c(min(x),max(x)), probability=T, nclass=max(x)-min(x)+1,
col='lightblue', xlab=' ', ylab=' ', axes=F,
main='Positive Skewed')
lines(density(x,bw=1), col='red', lwd=3)
sigma = 0.6
mu = 2
x = seq(-10, 60, length.out = 500)
Z = dlnorm(x, mu, sigma)
plot(x, Z, type = "l", xlim = c(-5, 30), ylim = c(0, .15), col = "red")
lines(x, pdfX, col = "blue")
data("ToothGrowth")
p <- ggboxplot(ToothGrowth, x = "supp", y = "len",
color = "supp", palette = "jco",
add = "jitter")
p
p + stat_compare_means(method = "t.test")
setwd("~/Documents/github_pages/stats_crash_course/pages/images/example_viz")
# Load in the dat data and store it in an object
dat <- iris
# For this example we will be removing virginica from the dataset
dat <- dat[dat$Species != "virginica",]
dat$Species <- factor(dat$Species)
# Assign colors for each species of
col <- rep("black", length(dat$Species))
col[dat$Species == "setosa"] <- "red"
col[dat$Species == "versicolor"] <- "green"
# Quick pairwise plots of the variables to easily visualize the data
pairs(dat[,1:4], col = col)
legend(0.85,0.6, as.vector(unique(dat$Species)))
###################
### Chi Squared ###
###################
# A Chi-squared test tests if the observed frequencies in a data set match the predicted frequencies
# Non parametric meaning it does not assume the data are normally distributed
# We can do this for categorical variables using a contingency table
# Let's make a contingency table for the data
# First we make cutoffs within the data, simply breaking it above and below the median value
# Cutting the dataset in half at the median
dat$Petal.Width.Cat <- cut(dat$Petal.Width, breaks = quantile(dat$Petal.Width, probs = seq(0, 1, 0.5)), include.lowest = TRUE)
# Then we conver the numerical binnings into values we can understand
levels(dat$Petal.Width.Cat) <- c("Below", "Above")
# Take a brief look at the data
head(dat)
dat <- dat[,!(names(dat) %in% "Petal.Width")]
head(dat)
cont <- table(dat$Petal.Width.Cat, dat$Species)
cont
# H0: Petal widths between different species are indistinguishable
# Ha: Petal widths between different species are different
Xsqt <- chisq.test(cont)
Xsqt
# This allows us to reject the null hypothesis and accept the alternalte hypothesis.
# Or, petal widths are distinctly different between species
ggbarstats(
data  = mtcars,
x     = am,
y     = cyl,
label = "both",
)
library(ggstatsplot)
ggbarstats(
data  = mtcars,
x     = am,
y     = cyl,
label = "both",
)
M <- as.table(rbind(c(762, 327, 468), c(484, 239, 477)))
dimnames(M) <- list(gender = c("F", "M"),
party = c("Democrat","Independent", "Republican"))
(Xsq <- chisq.test(M))  # Prints test summary
barplot(Xsq$observed, Xsq$expected, beside = TRUE)
attach(M)
mosaicplot(~party + gender, data = M)
barplot(Xsq$observed, Xsq$expected, beside = TRUE)
M = as.table(rbind(c(762, 327, 468), c(484, 239, 477)))
dimnames(M) = list(gender = c("F", "M"),
party = c("Democrat","Independent", "Republican"))
chisq.plot(list=M, standardize=F)
library(ggstatsplot)
ggbarstats(
data  = mtcars,
x     = am,
y     = cyl,
label = "both",
)
?ggbarstats
ggbarstats(
data  = mtcars,
x     = am,
y     = cyl
)
ggbarstats(
data  = mtcars,
x     = am,
y     = cyl,
results.subtitle
)
ggbarstats(
data  = mtcars,
x     = am,
y     = cyl,
results.subtitle = TRUE
)
mtcars
library(ggstatsplot)
ggbarstats(
data  = mtcars,
x     = am,
y     = cyl
)
p <- ggbarstats(mtcars, x = vs, y = cyl)
# looking at the plot
p
p
library(ggstatsplot)
ggbarstats(
data  = mtcars,
x     = am,
y     = cyl
)
library(ggstatsplot)
dat <- data.frame(
"smoke_no" = c(7, 0),
"smoke_yes" = c(2, 5),
row.names = c("Athlete", "Non-athlete"),
stringsAsFactors = FALSE
)
colnames(dat) <- c("Non-smoker", "Smoker")
dat
chisq.test(dat)$expected
test <- fisher.test(dat)
test
x <- c()
for (row in rownames(dat)) {
for (col in colnames(dat)) {
x <- rbind(x, matrix(rep(c(row, col), dat[row, col]), ncol = 2, byrow = TRUE))
}
}
df <- as.data.frame(x)
colnames(df) <- c("Sport_habits", "Smoking_habits")
df
# Fisher's exact test with raw data
test <- fisher.test(table(df))
# combine plot and statistical test with ggbarstats
library(ggstatsplot)
ggbarstats(
df, Smoking_habits, Sport_habits,
results.subtitle = FALSE,
subtitle = paste0(
"Fisher's exact test", ", p-value = ",
ifelse(test$p.value < 0.001, "< 0.001", round(test$p.value, 3))
)
)
# Weight of the mice before treatment
before <-c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)
# Weight of the mice after treatment
after <-c(392.9, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)
# Create a data frame
my_data <- data.frame(
group = rep(c("before", "after"), each = 10),
weight = c(before,  after)
)
my_dat
a\
my_data
?stat_compare_means
# Weight of the mice before treatment
before <-c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)
# Weight of the mice after treatment
after <-c(392.9, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)
# Create a data frame
my_data <- data.frame(
group = rep(c("before", "after"), each = 10),
weight = c(before,  after)
)
p <- ggboxplot(my_data, x = "group", y = "weight",
color = "supp", palette = "jco",
add = "jitter")
p + stat_compare_means(method = "t.test", paired = TRUE)
p <- ggboxplot(my_data, x = "group", y = "weight",
color = c("red","blue"),
add = "jitter")
p <- ggboxplot(my_data, x = "group", y = "weight"
add = "jitter")
p <- ggboxplot(my_data, x = "group", y = "weight",
add = "jitter")
p
p + stat_compare_means(method = "t.test", paired = TRUE)
?ggboxplot
p <- ggboxplot(my_data, x = "group", y = "weight", add = "jitter", palette = "npg")
p[]
p
p + stat_compare_means(method = "t.test", paired = TRUE)
p <- ggboxplot(my_data, x = "group", y = "weight", add = "jitter", palette = "npg")
p <- ggboxplot(my_data, x = "group", y = "weight", add = "jitter", palette = "lancet")
p
p <- ggboxplot(my_data, x = "group", y = "weight", palette = "lancet" ,add = "jitter")
p
p <- ggboxplot(my_data, x = "group", y = "weight", color = "lancet", fill = "lancet" add = "jitter")
p <- ggboxplot(my_data, x = "group", y = "weight", color = "lancet", fill = "lancet", add = "jitter")
p
rlang::last_error()
rlang::last_trace()
class(my_data$group)
my_data$group <- factor(my_data$group)
p <- ggboxplot(my_data, x = "group", y = "weight", color = "lancet", fill = "lancet", add = "jitter")
p
p <- ggboxplot(my_data, x = "group", y = "weight", palette = "lancet", add = "jitter")
p
# Weight of the mice before treatment
before <-c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)
# Weight of the mice after treatment
after <-c(392.9, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)
# Create a data frame
my_data <- data.frame(
group = rep(c("before", "after"), each = 10),
weight = c(before,  after)
)
p <- ggboxplot(my_data, x = "group", y = "weight", palette = "lancet", add = "jitter")
p
p <- ggboxplot(my_data, x = "group", y = "weight", color = "group", palette = "lancet", add = "jitter")
p + stat_compare_means(method = "t.test", paired = TRUE)
my_data <- mtcars
library("ggpubr")
ggscatter(my_data, x = "mpg", y = "wt",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Miles/(US) gallon", ylab = "Weight (1000 lbs)")
library("ggpubr")
my_data <- mtcars
ggscatter(my_data, x = "mpg", y = "wt",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Miles/(US) gallon", ylab = "Weight (1000 lbs)")
?ggscatter
ggscatter(my_data, x = "mpg", y = "wt",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
cor.coeff.args = list(method = "pearson", label.x.npc = "right", label.y.npc = "top"),
xlab = "Miles/(US) gallon", ylab = "Weight (1000 lbs)")
ggscatter(my_data, x = "mpg", y = "wt",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
cor.coeff.args = list(method = "pearson", label.x.npc = "middle", label.y.npc = "top"),
xlab = "Miles/(US) gallon", ylab = "Weight (1000 lbs)")
set.seed(9) # for reproducibility
data <- data.frame(
before = sample(c("+", "-", "+", "+"), 20, replace = TRUE),
after  = sample(c("-", "+", "-", "-"), 20, replace = TRUE))
View(data)
library(ggstatsplot)
set.seed(9) # for reproducibility
data <- data.frame(
before = sample(c("+", "-", "+", "+"), 20, replace = TRUE),
after  = sample(c("-", "+", "-", "-"), 20, replace = TRUE))
ggbarstats(
data = data,
x    = before,
y    = after,
paired = TRUE,
label = "both"
)
data
?ggbarstats
ggbarstats(
data = data,
x    = before,
y    = after,
paired = TRUE,
label = "both"
)
# Data in two numeric vectors
# ++++++++++++++++++++++++++
# Weight of the mice before treatment
before <-c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)
# Weight of the mice after treatment
after <-c(392.9, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)
# Create a data frame
my_data <- data.frame(
group = rep(c("before", "after"), each = 10),
weight = c(before,  after)
)
library("ggpubr")
# Data in two numeric vectors
# ++++++++++++++++++++++++++
# Weight of the mice before treatment
before <-c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)
# Weight of the mice after treatment
after <-c(392.9, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)
# Create a data frame
my_data <- data.frame(
group = rep(c("before", "after"), each = 10),
weight = c(before,  after)
)
ggboxplot(my_data, x = "group", y = "weight",
color = "group", palette = c("#00AFBB", "#E7B800"),
order = c("before", "after"),
ylab = "Weight", xlab = "Groups")
?ggboxplot
res <- wilcox.test(weight ~ group, data = my_data, paired = TRUE)
res$p.value
ggboxplot(my_data, x = "group", y = "weight",
color = "group", palette = c("#00AFBB", "#E7B800"),
order = c("before", "after"),
ylab = "Weight", xlab = "Groups", add = "jitter")
?stat_compare_means(method =
)
stat_pvalue_manual(res$p.value)
?stat_pvalue_manual()
stat_pvalue_manual(res)
res
stat_pvalue_manual(res, label = "p-value")
p <- ggboxplot(my_data, x = "group", y = "weight",
color = "group", palette = c("#00AFBB", "#E7B800"),
order = c("before", "after"),
ylab = "Weight", xlab = "Groups", add = "jitter")
p + stat_pvalue_manual(res, label = "p-value")
res
p + stat_pvalue_manual(wilcox.test(weight ~ group, data = my_data, paired = TRUE), label = "p-value")
p + stat_pvalue_manual(wilcox.test(weight ~ group, data = my_data, paired = TRUE), label = "p-value")
stat.test <- compare_means(
len ~ dose, data = ToothGrowth,
method = "t.test"
)
stat.test
?stat.test
?compare_means
stat.test <- compare_means(len ~ dose, data = ToothGrowth, method = "wilcox")
stat.test
stat.test <- compare_means(weight ~ group, data = ToothGrowth, method = "wilcox")
library("ggpubr")
# Data in two numeric vectors
# ++++++++++++++++++++++++++
# Weight of the mice before treatment
before <-c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)
# Weight of the mice after treatment
after <-c(392.9, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)
# Create a data frame
my_data <- data.frame(
group = rep(c("before", "after"), each = 10),
weight = c(before,  after)
)
my_data
stat.test <- compare_means(weight ~ group, data = my_data, method = "wilcox")
stat.gtest
stat.test
stat.test <- compare_means(weight ~ group, data = my_data, method = "wilcox", paired = TRUE)
p <- ggboxplot(my_data, x = "group", y = "weight",
color = "group", palette = c("#00AFBB", "#E7B800"),
order = c("before", "after"),
ylab = "Weight", xlab = "Groups", add = "jitter")
p + stat_pvalue_manual(res, label = "p-value")
stat.test <- compare_means(weight ~ group, data = my_data, method = "wilcox", paired = TRUE)
p <- ggboxplot(my_data, x = "group", y = "weight",
color = "group", palette = c("#00AFBB", "#E7B800"),
order = c("before", "after"),
ylab = "Weight", xlab = "Groups", add = "jitter")
p + stat_pvalue_manual(stat.test, label = "p-value")
p + stat_pvalue_manual(stat.test, label = "p.adj")
stat.test <- compare_means(weight ~ group, data = my_data, method = "wilcox", paired = TRUE)
p <- ggboxplot(my_data, x = "group", y = "weight",
color = "group", palette = c("#00AFBB", "#E7B800"),
order = c("before", "after"),
ylab = "Weight", xlab = "Groups", add = "jitter")
p + stat_pvalue_manual(stat.test, label = "p.adj")
stat.test
stat.test <- compare_means(weight ~ group, data = my_data, method = "wilcox", paired = TRUE)
p <- ggboxplot(my_data, x = "group", y = "weight",
color = "group", palette = c("#00AFBB", "#E7B800"),
order = c("before", "after"),
ylab = "Weight", xlab = "Groups", add = "jitter")
p + stat_pvalue_manual(stat.test, label = "p = {p.adj}")
res <- wilcox.test(weight ~ group, data = my_data, paired = TRUE)
stat.test <- compare_means(weight ~ group, data = my_data, method = "wilcox", paired = TRUE)
mutate(y.position = c(29, 35, 39))
stat.test <- stat.test %>% mutate(y.position = c(29, 35, 39))
stat.test
stat.test <- compare_means(weight ~ group, data = my_data, method = "wilcox", paired = TRUE)
stat.test <- stat.test %>% mutate(y.position = c(1))
stat.test
p + stat_pvalue_manual(stat.test, label = "p = {p.adj}")
stat.test <- compare_means(weight ~ group, data = my_data, method = "wilcox", paired = TRUE)
stat.test <- stat.test %>% mutate(y.position = c(1))
p <- ggboxplot(my_data, x = "group", y = "weight",
color = "group", palette = c("#00AFBB", "#E7B800"),
order = c("before", "after"),
ylab = "Weight", xlab = "Groups", add = "jitter")
p + stat_pvalue_manual(stat.test, label = "p = {p.adj}")
?stat_pvalue_manual
p + stat_pvalue_manual(stat.test, label = "p = {p.adj}", x = 450)
stat.test <- compare_means(weight ~ group, data = my_data, method = "wilcox", paired = TRUE)
stat.test <- stat.test %>% mutate(y.position = c(450))
p <- ggboxplot(my_data, x = "group", y = "weight",
color = "group", palette = c("#00AFBB", "#E7B800"),
order = c("before", "after"),
ylab = "Weight", xlab = "Groups", add = "jitter")
p + stat_pvalue_manual(stat.test, label = "p = {p.adj}")
stat.test <- compare_means(weight ~ group, data = my_data, method = "wilcox", paired = TRUE)
stat.test <- stat.test %>% mutate(y.position = c(420))
p <- ggboxplot(my_data, x = "group", y = "weight",
color = "group", palette = c("#00AFBB", "#E7B800"),
order = c("before", "after"),
ylab = "Weight", xlab = "Groups", add = "jitter")
p + stat_pvalue_manual(stat.test, label = "p = {p.adj}")
stat.test <- compare_means(weight ~ group, data = my_data, method = "wilcox", paired = TRUE)
stat.test <- stat.test %>% mutate(y.position = c(440))
p <- ggboxplot(my_data, x = "group", y = "weight",
color = "group", palette = c("#00AFBB", "#E7B800"),
order = c("before", "after"),
ylab = "Weight", xlab = "Groups", add = "jitter")
p + stat_pvalue_manual(stat.test, label = "p = {p.adj}")
stat.test <- compare_means(weight ~ group, data = my_data, method = "wilcox", paired = TRUE)
stat.test <- stat.test %>% mutate(y.position = c(450))
p <- ggboxplot(my_data, x = "group", y = "weight",
color = "group", palette = c("#00AFBB", "#E7B800"),
order = c("before", "after"),
ylab = "Weight", xlab = "Groups", add = "jitter")
p + stat_pvalue_manual(stat.test, label = "p = {p.adj}")
